import argparse

def get_args():
    parser = argparse.ArgumentParser(description='The paramters with the project')
    subparsers = parser.add_subparsers(dest='command', help='Sub-command help')
    # ----------------------------PrismNet-------------------------------------k_mer----------
    PrismNet = subparsers.add_parser('PrismNet', help = 'PrismNet')
    PrismNet.add_argument('--batch_size', default = 32, type = int, help = 'The batch size with PrismNet')
    PrismNet.add_argument('--lr', default = 0.001, type = float, help = 'The learning rate with PrismNet')
    PrismNet.add_argument('--dataloader_num_workers', default = 0, type = int)
    PrismNet.add_argument('--epochs', default = 200, type = int)
    PrismNet.add_argument('--save_path', default = './models/PrismNet.pt', type = str)
    PrismNet.add_argument('--log_path', default = './log/PrismNet.log', type = str)
    PrismNet.add_argument('--early_stop', default = 10, type = int)
    PrismNet.add_argument('--Embed_dim', default = 16, type = int)
    # ----------------------------PrismNet_Str-------------------------------------k_mer----------
    PrismNet_Str = subparsers.add_parser('PrismNet_Str', help = 'PrismNet_Str')
    PrismNet_Str.add_argument('--batch_size', default = 32, type = int, help = 'The batch size with PrismNet_Str')
    PrismNet_Str.add_argument('--lr', default = 0.001, type = float, help = 'The learning rate with PrismNet_Str')
    PrismNet_Str.add_argument('--dataloader_num_workers', default = 0, type = int)
    PrismNet_Str.add_argument('--epochs', default = 200, type = int)
    PrismNet_Str.add_argument('--save_path', default = './models/PrismNet_Str.pt', type = str)
    PrismNet_Str.add_argument('--log_path', default = './log/PrismNet_Str.log', type = str)
    PrismNet_Str.add_argument('--early_stop', default = 10, type = int)
    PrismNet_Str.add_argument('--Embed_dim', default = 16, type = int)
    # ----------------------------Multi_Modal-----------------------------------------------
    Multi_Modal = subparsers.add_parser('Multi_Modal', help = 'Multi_Modal')
    Multi_Modal.add_argument('--batch_size', default = 32, type = int, help = 'The batch size with Multi_Modal')
    Multi_Modal.add_argument('--lr', default = 0.001, type = float, help = 'The learning rate with Multi_Modal')
    Multi_Modal.add_argument('--Vision_lr', default = 1e-3, type=float, help = 'The lr with SWIN in Multi-Modal')
    Multi_Modal.add_argument('--dataloader_num_workers', default = 5, type = int)
    Multi_Modal.add_argument('--epochs', default = 200, type = int)
    Multi_Modal.add_argument('--save_path', default = './models/Multi_Modal.pt', type = str)
    Multi_Modal.add_argument('--log_path', default = './log/Multi_Modal.log', type = str)
    Multi_Modal.add_argument('--early_stop', default = 10, type = int)
    Multi_Modal.add_argument('--load_model', default = None, type = str)

    Multi_Modal.add_argument('--text_only', action='store_true')
    Multi_Modal.add_argument('--vision_only', action='store_true')
    Multi_Modal.add_argument('--text_vision', action='store_true')

    Multi_Modal.add_argument('--direction', action='store_true')
    Multi_Modal.add_argument('--cross', action='store_true')

    Multi_Modal.add_argument('--distribution', type=float, default = 0)
    Multi_Modal.add_argument('--cross_attention_num_layers', default = 2, type = int)
    Multi_Modal.add_argument('--dropout', default = 0.1, type = float)


    Multi_Modal.add_argument('--MLDP', type=int, default = 1)
    Multi_Modal.add_argument('--DIS', type=int, default = 1)
    Multi_Modal.add_argument('--CDP', type=int, default = 1)
    Multi_Modal.add_argument('--SPTIAL_DIS', type=int, default = 1)
    Multi_Modal.add_argument('--UFOLD', type=int, default = 1)
    Multi_Modal.add_argument('--UNPAIR', type=int, default = 1)
    Multi_Modal.add_argument('--REPEAT', type=int, default = 1)
    Multi_Modal.add_argument('--UFOLD_ADD_UNPAIR', type=int, default = 0)
    
    Multi_Modal.add_argument('--pretrain_path', type=str, default = 'models/clip/Multi_Modal_pretrain.pt')
    Multi_Modal.add_argument('--pretrain_module', action='store_true')
    Multi_Modal.add_argument('--SWIT_pretrain_path', type=str, default = '../MAE-Lite/outputs/mae_lite/mae_tiny_400e/last_epoch_ckpt.pth.tar')
    
    Multi_Modal.add_argument('--pad_length', type=int, default = 112)
    Multi_Modal.add_argument('--eval_step', type=int, default = -1)

    Multi_Modal.add_argument('--max_step', type=int, default = 1000)

    # ----------------------------UFold-------------------------------------k_mer----------
    UFold = subparsers.add_parser('UFold', help = 'UFold')
    UFold.add_argument('--batch_size', default = 32, type = int, help = 'The batch size with UFold')
    UFold.add_argument('--lr', default = 0.001, type = float, help = 'The learning rate with UFold')
    UFold.add_argument('--dataloader_num_workers', default = 0, type = int)
    UFold.add_argument('--epochs', default = 200, type = int)
    UFold.add_argument('--save_path', default = './models/PrismNet.pt', type = str)
    UFold.add_argument('--log_path', default = './log/PrismNet.log', type = str)
    UFold.add_argument('--early_stop', default = 10, type = int)
    UFold.add_argument('--train', type=str, default = 'origin_data')
    UFold.add_argument('--MLDP', type=int, default = 1)
    UFold.add_argument('--DIS', type=int, default = 1)
    UFold.add_argument('--CDP', type=int, default = 1)
    UFold.add_argument('--SPTIAL_DIS', type=int, default = 1)
    UFold.add_argument('--UFOLD', type=int, default = 1)
    UFold.add_argument('--UNPAIR', type=int, default = 1)
    UFold.add_argument('--REPEAT', type=int, default = 1)
    UFold.add_argument('--UFOLD_ADD_UNPAIR', type=int, default = 0)
    UFold.add_argument('--feature_mode', type=str, default = 'UFOLD')
    UFold.add_argument('--FTL', type=int, default = 0)
    # ----------------------------SWIN-UNET-------------------------------------k_mer----------
    SWIN_UNET = subparsers.add_parser('SWIN_UNET', help = 'SWIN_UNET')
    SWIN_UNET.add_argument('--batch_size', default = 32, type = int, help = 'The batch size with UFold')
    SWIN_UNET.add_argument('--lr', default = 0.001, type = float, help = 'The learning rate with UFold')
    SWIN_UNET.add_argument('--dataloader_num_workers', default = 0, type = int)
    SWIN_UNET.add_argument('--epochs', default = 200, type = int)
    SWIN_UNET.add_argument('--save_path', default = './models/PrismNet.pt', type = str)
    SWIN_UNET.add_argument('--log_path', default = './log/PrismNet.log', type = str)
    SWIN_UNET.add_argument('--early_stop', default = 10, type = int)
    SWIN_UNET.add_argument('--train', type=str, default = 'origin_data')
    SWIN_UNET.add_argument('--MLDP', type=int, default = 1)
    SWIN_UNET.add_argument('--DIS', type=int, default = 1)
    SWIN_UNET.add_argument('--CDP', type=int, default = 1)
    SWIN_UNET.add_argument('--SPTIAL_DIS', type=int, default = 1)
    SWIN_UNET.add_argument('--UFOLD', type=int, default = 1)
    SWIN_UNET.add_argument('--UNPAIR', type=int, default = 1)
    SWIN_UNET.add_argument('--REPEAT', type=int, default = 1)
    SWIN_UNET.add_argument('--UFOLD_ADD_UNPAIR', type=int, default = 0)
    SWIN_UNET.add_argument('--feature_mode', type=str, default = 'UFOLD')
    SWIN_UNET.add_argument('--FTL', type=int, default = 0)
    SWIN_UNET.add_argument('--pretrain_path', type = str, default = None)
    SWIN_UNET.add_argument('--SWIT_pretrain_path', type=str, default = None)

    # ----------------------------generate clip data-------------------------------------------------------
    clip = subparsers.add_parser('clip', help = 'generate clip data')
    clip.add_argument('--tl_ratio', type = float, default = 0.1, help = 'The ratio of transfer learning')
    clip.add_argument('--origin_data_path', type = str, default = 'origin_data/clip', help = 'The path of clip data')
    clip.add_argument('--tl_data_path', type = str, default = 'data/clip', help = 'The path of transfer data')

    parser.add_argument('--dataset', type=str, default = 'clip')
    parser.add_argument('--data_path', type=str, default = 'origin_data')
    parser.add_argument('--k_fold_data_path', type = str, default = 'data/clip', help = 'The path of k_fold data path, the k is 5')
    parser.add_argument('--filename', type=str, default = 'C17ORF85_HEK293')
    parser.add_argument('--test_filename', type=str, default = 'C17ORF85_HEK293')
    parser.add_argument('--gpu', type=int, default=0, help = 'The gpu')
    parser.add_argument('--kfold_k', type=int, default=5, help = 'The current test dataset')
    parser.add_argument('--seed', default = 0, type = int, help = 'The random seed')
    parser.add_argument('--pretrain', action='store_true')
    parser.add_argument('--metric', type=str, default = 'MCC')
    parser.add_argument('--output', type=str, default = 'output/RSS/output.csv')
    parser.add_argument('--multi_gpu', type=int, default = 0)
    parser.add_argument('--seq', type=str, default = '', help='The seq for RSS predict.')
    args = parser.parse_args()
    return args

def get_config():
    args = get_args()
    return args

if __name__ == '__main__':
    config = get_config()
    print(config)